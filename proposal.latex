\documentclass[a4paper,12pt]{article}

\usepackage[british]{babel}
\usepackage[usenames,dvips]{color}
\usepackage[a4paper,margin=1.5cm,bottom=2.25cm]{geometry}
\usepackage{hyperref}
\usepackage{url}

\hypersetup{
  colorlinks,
  citecolor=black,
  filecolor=black,
  linkcolor=black,
  urlcolor=black
}

\renewcommand{\baselinestretch}{1.3}

\title{Proposal: ICSF Documents on GitHub}
\author{Benedict Harcourt}

\begin{document}

	\maketitle

	\begin{abstract}
  		Since their previous revision, both ICSF's Constitution and
		Standing Orders have been kept under revision control - meaning
		that all ``checked-in'' versions are always available.
		What we proposed is a mechanism for members to be able to
		suggest changes in a controlled manner at any time, backed on
		external purpose built software for handling distributed
		revision of documents.
	\end{abstract}

	\tableofcontents

	\newpage

	\section{Proposal}

	\subsection{Revision Control}

	Revision control does pretty much what it says - it tracks and
	controls revision of some data.
	In this case, we're looking at keeping track of revisions to the
	core document of the society - the Constitution, and the Standing
	Orders - and the potential amendments to them.

	The suggested method of revision control is called Git, a system
	which is currently in use with over 2 million projects\footnote{
		Github alone claims around 2.8 million repositories
	} including several high profile open source systems, such as the
	core of all Linux systems, the Linux Kernel project.
	It would be used in conjunction with the we service GitHub
	(\url{github.com}).

	Git is appropriate for a variety of reasons, the major one being
	that it is a distributed revision control system.
	Each version (`clone' or `fork')  of the original data in entirely independent
	of the original, allowing people to work in private on any git
	project.
	Inside this private copy, ever single version is always accessible;
	furthermore, versions do not have to come one after another -
	there can also be different branches of the tree.

	Changes, called 'commits' are uniquely identified, allowing for
	comparisons between different versions of the same project, and
	determining where their histories diverged.
	This functionality also allows changes to be pushed and pulled
	between the different forks of a project.

	Git also does a lot more, but this covers the core ideas for the
	functions that would be mainly used in a project of this nature.

	\subsection{GitHub}

	GitHub is a popular, mature website which hosts Git repositories.
	A reasonable number of ICSF members already have a GitHub account,
	so it is not an unknown to all of the editors.
	Furthermore, at the time of writing, it hosts the main repository for
	the Linux Kernel project, which forms the backbone of all Linux
	distributions.

	GitHub accounts for free projects are free, and always will be
	(unless GitHub decide to lose all their customers).
	The versions of the data under revision control are kept in a
	Git repository (repo for short).
	Each clone (copy) of the repo is entirely stand alone - it has
	data on all of the revisions, the ability to create new ones, and
	the ability to send and receive other changes from other repos.

	\subsection{Structure of Proposing an Amendment}

	A somewhat common misconception is that this will let anyone just
	wander by and change the contents of the files.
	In fact, the exact opposite is true - the files in a repo can only be
	directly altered by the controller of that repo.
	Changes are made by a third party cloning the repo - creating an
	equivalent copy of the original under their control.
	They can alter the files as much as they want, creating any number of
	revisions, and can also copy in changes from other sources.
	The ability to copy in ('pull') other's changes will also be available
	to the original user, allowing them to incorporate other's work.

	GitHub automates large chunks of this process - the main repo's files
	will have edit buttons, which silent cause the repo to be cloned and
	so forth.
	It also has the option of creating 'pull-requests', a way of proposing
	what changes should be merged into the original repo.

	GitHub also draws a lot from the world of social networking sites,
	in that virtually everything can be commented upon and discussed, in
	much the same way as a change to an important document should be.
	Discussion of pull-requests, revisions, and even individual lines
	within revisions will be a proving ground for changes.

	\subsection{Affects on the Society}

	Being a free, public repository would mean that anyone would be able to
	see the constitution source code which, for all intents and purposes,
	is the same as being able to see the constitution itself;
	the constitution is already publicly available on the web.

	The constitution and standing orders are normally brought up at the AGM
	by a certain subset of the society who care a great deal about the
	paperwork.
	These people are also the ones most likely to want to discuss changes
	made by others, which might cause them to do a lot of work without any
	input from the rest of the society.

	However, in many ways, this is an optimal solution. The changes still
	have to be passed as stated within the documents, and thus will still
	under go the scrutiny of the committee and or membership in much the
	same way as they always did.
	The difference would be that the changes being proposed will have been
	argued out at least as much on the internet than just being proposed in
	a meeting.

	The extreme end of this is to require that all non-formatting and
	non-proofing changes be accompanied with a document explaining their
	rationale.

	Either way, these can all be collated an distributed in advance of the
	appropriate meetings, allowing those who will vote slightly more time
	than has been available in past years to review the proposals.

	\section{Implementation}

	\subsection{Set up}

	Firstly, a GitHub account would be created using ICSF's root email
	account, \url{icsflib@gmail.com}.
	This account would contain the canonical master version of the data
	on GitHub;
	the official 'origin' may well remain on ICSF's servers - the
	difference is entirely semantic, giving us a redundant backup either way.

	Then, the repository as it stands would be pushed to GitHub.

	\subsection{Ongoing Administration}

	Requests made via GitHub would have to be reviewed.
	It makes most sense to assign this to be one of the duties of one
	of the committee members - the Tech Priest should already have the
	requisite knowledge to understand the workings, and an additional
	guide would be added to the wiki.

	The email account system would be modified to forward notifications
	of GitHub pull requests to the chosen committee member, allowing
	them to review the proposed changes.
	Those who choose to watch the repository on GitHub will also be
	informed in accordance with their settings, allowing them to
	contribute their thoughts.

	Before a meeting at which the documents would be discussed, proposals
	can be merged into the 'integration branch' - a list of things we're
	interested in looking at.

	Git's in built tools allow for the generation of a list of changes,
	and including the comments already collected should not be too
	complicated.
	This can then be distributed to the committee and voted on as a
	series of propositions, as submitted.
	This procedure would still be governed (and, as described, is within)
	the tenants set out by the Union Constitution and the Society's
	Constitution.

	\subsection{Analysis of Costs}

	There are no monetary costs to switching to this procedure, and the
	initial setup is likely to take less time than reading this document.
	The main cost is the extra commitment from a committee member to
	manage it; the main benefit is having shorter general meetings, thus
	keeping the discontentment from the general membership (who, perhaps
	rightly, see many of the changes to these changes to be purely
	pedantry) to a minimum.

	\section{Further and Future Uses}

	This idea is also useful for any documents which we use on a regular
	basis, and change slightly now and again.
	It would perhaps make sense to include the rest of the current union
	documentation: the risk assessment, code of conduct, etc.
	Two further examples come to mind - firstly, changing the method of
	the database backup to use git; this, however, raises major privacy
	concerns with regards to personal data, and would probably require us
	to get a private repository.
	The other public use is for the outline for the current additions of
	Wyrmtounge, which use a similar development system and tools as the
	constitution files.

\end{document}

